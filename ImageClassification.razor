@page "/image-classification"
@using Microsoft.AspNetCore.Components.Forms
@using System.IO;
@inject TestModel TestModel

<h3>Классификация изображений</h3>

<div class="mb-3">
    <label for="fileInput" class="form-label">Загрузите изображение</label>
    <InputFile id="fileInput" OnChange="HandleFileSelected" />
</div>

@if (!string.IsNullOrEmpty(result))
{
    <p><strong>Результат:</strong> @result</p>
}

@if (uploadedImageSrc != null)
{
    <img src="@uploadedImageSrc" alt="Uploaded Image" style="max-width: 300px;" />
}

@code {
    private byte[] uploadedImageBytes;
    private string uploadedImageSrc;
    private string result;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            uploadedImageBytes = memoryStream.ToArray();

           
            uploadedImageSrc = $"data:image/{file.ContentType};base64,{Convert.ToBase64String(uploadedImageBytes)}";

          
            ClassifyImage();
        }
    }

    private void ClassifyImage()
    {
        if (uploadedImageBytes == null || uploadedImageBytes.Length == 0)
        {
            Console.WriteLine("зображение не загружено или пустое");
            result = "Изображение не загружено";
            return;
        }

        try
        {
            Console.WriteLine("Начинаем классификацию");
            result = PredictClass(uploadedImageBytes);
            Console.WriteLine($"Результат классификации: {result}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка во время классификации{ex.Message}");
            result = "Ошибка: " + ex.Message;
        }
    }

    private string PredictClass(byte[] imageBytes)
    {
        
        var prediction = TestModel.Predict(imageBytes);
        return prediction.PredictedLabel;
    }
}